# Laravel Development with AI Agents

<project-context>
Project: $PROJECT_NAME
Stack: Laravel + Livewire + Filament + Alpine + Tailwind
Approach: Production-quality, agent-orchestrated development
</project-context>

<agent-delegation priority="critical">
## ðŸ¤– USE AGENTS AGGRESSIVELY

You have specialized agents at your disposal. **USE THEM!**

- **Before coding**: "I'll spawn a research agent to explore the codebase"
- **When issues arise**: "I'll spawn fix agents to resolve all issues in parallel"
- **For features**: "I'll delegate implementation to specialist agents"
- **For quality**: "I'll spawn a review agent for final validation"

See `.claude/agents/orchestration.md` for patterns.
</agent-delegation>

<critical-workflow>
## Core Workflow

1. **Research** â†’ Spawn research agents to understand codebase
2. **Plan** â†’ Create implementation strategy
3. **Implement** â†’ Use implementation & test agents in parallel
4. **Fix** â†’ Spawn fix agents for any issues
5. **Review** â†’ Final quality check with review agent

<ultrathink-trigger>
For complex problems: "Let me ultrathink about this architecture"
</ultrathink-trigger>
</critical-workflow>

<automated-enforcement>
## ðŸš¨ Hooks Are Watching

Automated checks run on EVERY file change:
- Exit code 2 = BLOCKING issue that MUST be fixed
- Hooks will suggest which agents to spawn
- Work WITH the hooks, they ensure quality

When hooks fail: **Immediately spawn fix agents!**
</automated-enforcement>

<rule-references>
## Standards & Rules

All rules are externalized for clarity:

- **Laravel Standards**: `.claude/rules/laravel-standards.json`
- **Forbidden Patterns**: `.claude/rules/forbidden-patterns.json`
- **Quality Checks**: `.claude/rules/quality-checks.json`

<key-rules>
Critical rules to remember:
- NO raw SQL - use Eloquent
- NO direct $_POST - use Request validation
- NO keeping old code - delete when replacing
- NO TODOs in code - complete everything
</key-rules>
</rule-references>

<agent-triggers>
## Agent Activation Triggers

| Situation | Action |
|-----------|--------|
| Starting new feature | Spawn research agent first |
| Hooks report errors | Spawn fix agents immediately |
| Writing new code | Spawn implementation + test agents |
| Code seems complex | Spawn refactor agent |
| Before marking done | Spawn review agent |
</agent-triggers>

<working-memory>
## Memory Management

When context gets long:
1. Re-read this file
2. Check `.claude/agents/` for agent capabilities
3. Update TODO.md with current state
4. Document decisions in PROGRESS.md
</working-memory>

<communication>
## Progress Updates

Use concise status updates:
```
âœ“ Research complete - found existing patterns
âš¡ Spawning implementation agent for feature
âœ“ Tests written in parallel
âš¡ Spawning fix agents for 3 linting issues
âœ“ All checks green - ready for review
```
</communication>

<quick-reference>
## Command Reference

- `/check` - Spawn fix agents for all issues
- `/next` - Execute feature with agent orchestration
- `/prompt` - Synthesize implementation prompt

## Agent Types

- `fix-agent` - Resolves all quality issues
- `research-agent` - Explores codebase
- `implementation-agent` - Builds features
- `test-agent` - Writes comprehensive tests
- `refactor-agent` - Improves code quality
- `review-agent` - Final quality assurance

## Key Paths

- Templates: `.claude/agents/`
- Rules: `.claude/rules/`
- Hooks: `.claude/hooks/`
- Commands: `.claude/commands/`
</quick-reference>

---
*Remember: Spawn agents liberally. They work in parallel for maximum efficiency.*