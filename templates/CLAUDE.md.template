# Laravel Development Partnership

<partnership>
We're building production-quality Laravel applications together. Your role is to create maintainable, efficient solutions while following Laravel best practices and catching potential issues early.

When you seem stuck or overly complex, I'll redirect you - my guidance helps you stay on track.
</partnership>

<automated-checks priority="critical">
## 🚨 AUTOMATED CHECKS ARE MANDATORY
**ALL hook issues are BLOCKING - EVERYTHING must be ✅ GREEN!**
No errors. No formatting issues. No linting problems. Zero tolerance.
These are not suggestions. Fix ALL issues before continuing.
</automated-checks>

<critical-workflow>
## CRITICAL WORKFLOW - ALWAYS FOLLOW THIS!

### Research → Plan → Implement
**NEVER JUMP STRAIGHT TO CODING!** Always follow this sequence:
1. **Research**: Explore the codebase, understand existing patterns
2. **Plan**: Create a detailed implementation plan and verify it with me before starting
3. **Implement**: Execute the plan with validation checkpoints

When asked to implement any feature, you'll first say: "Let me research the codebase and create a plan before implementing."

For complex architectural decisions or challenging problems, use **"ultrathink"** to engage maximum reasoning capacity. Say: "Let me ultrathink about this architecture before proposing a solution."

### USE MULTIPLE AGENTS!
*Leverage subagents aggressively* for better results:

* Spawn agents to explore different parts of the codebase in parallel
* Use one agent to write tests while another implements features
* Delegate research tasks: "I'll have an agent investigate the database schema while I analyze the API structure"
* For complex refactors: One agent identifies changes, another implements them

Say: "I'll spawn agents to tackle different aspects of this problem" whenever a task has multiple independent parts.

### Reality Checkpoints
**Stop and validate** at these moments:
- After implementing a complete feature
- Before starting a new major component
- When something feels wrong
- Before declaring "done"
- **WHEN HOOKS FAIL WITH ERRORS** ❌

Run: `composer refactor:rector && composer refactor:lint && composer test`

> Why: You can lose track of what's actually working. These checkpoints prevent cascading failures.
</critical-workflow>

<hook-failures priority="critical">
### 🚨 CRITICAL: Hook Failures Are BLOCKING
**When hooks report ANY issues (exit code 2), you MUST:**
1. **STOP IMMEDIATELY** - Do not continue with other tasks
2. **FIX ALL ISSUES** - Address every ❌ issue until everything is ✅ GREEN
3. **VERIFY THE FIX** - Re-run the failed command to confirm it's fixed
4. **CONTINUE ORIGINAL TASK** - Return to what you were doing before the interrupt
5. **NEVER IGNORE** - There are NO warnings, only requirements

This includes:
- Formatting issues (Pint)
- Linting violations (PHPStan/Larastan)
- Code quality issues (Rector)
- Test failures (Pest)
- ALL other checks

Your code must be 100% clean. No exceptions.

**Recovery Protocol:**
- When interrupted by a hook failure, maintain awareness of your original task
- After fixing all issues and verifying the fix, continue where you left off
- Use the todo list to track both the fix and your original task
</hook-failures>

<working-memory>
## Working Memory Management

### When context gets long:
- Re-read this CLAUDE.md file
- Summarize progress in a PROGRESS.md file, create one if needed
- Document current state before major changes

### Maintain TODO.md:
```
## Current Task
- [ ] What we're doing RIGHT NOW

## Completed
- [x] What's actually done and tested

## Next Steps
- [ ] What comes next
```
</working-memory>

<laravel-rules>
## Laravel/PHP-Specific Rules

<forbidden-patterns>
### FORBIDDEN - NEVER DO THESE:
- **NO raw SQL** - use Eloquent or Query Builder
- **NO direct $_GET/$_POST** - use Laravel's request validation
- **NO keeping old and new code together**
- **NO** migration functions or compatibility layers
- **NO** versioned function names (processV2, handleNew)
- **NO** custom exception hierarchies without good reason
- **NO** TODOs in final code
- **NO** inline styles or scripts in Blade templates - use Tailwind classes
- **NO** database queries in Livewire render methods
- **NO** polling in Livewire/Filament - use Laravel Reverb + Echo for real-time updates
- **NO** comments within methods - let code be self-documenting with clear variable names
- **NO** class constants for labels/colors/icons - use Enum classes with methods

> **AUTOMATED ENFORCEMENT**: The smart-lint hook will BLOCK commits that violate these rules.
> When you see `❌ FORBIDDEN PATTERN`, you MUST fix it immediately!
</forbidden-patterns>

<required-standards>
### Required Standards:
- **Delete** old code when replacing it
- **Meaningful names**: `$userId` not `$id`, `$userAccountBalance` not `$balance`
- **Early returns** to reduce nesting
- **Type hints** on all methods: `public function handle(User $user): bool`
- **Self-documenting code** with clear variable names - no inline comments
- **Enum classes** with methods like `getLabel()`, `getDescription()`, `getColor()`, `getIcon()` (Filament style)
- **Pest tests** for all business logic, never PHPUnit always Pest tests
- **Livewire actions** for user interactions, not direct method calls
- **Filament resources** follow the standard pattern
- **Eloquent relationships** properly defined with return types
- **Laravel Echo** for real-time updates instead of polling
- **Laravel Reverb** for WebSocket server (local: https://<folder-name>.test)
- **Let `composer refactor:annotate` handle docblocks** - focus on clean code
</required-standards>
</laravel-rules>

<implementation-standards>
## Implementation Standards

### Our code is complete when:
- ✅ All linters pass with zero issues (PHPStan/Larastan)
- ✅ All tests pass (Pest)
- ✅ Code is formatted correctly (Pint)
- ✅ Code quality checks pass (Rector)
- ✅ Feature works end-to-end
- ✅ Old code is deleted
- ✅ Variable names are self-documenting
- ✅ Enum classes used instead of constants for labels/colors/icons
- ✅ `composer refactor:annotate` can generate proper docblocks

<testing-strategy>
### Testing Strategy
- Complex business logic → Write tests first
- Simple CRUD → Write tests after
- Livewire components → Test user interactions
- Filament resources → Test functionality
- Skip tests for simple blade templates and basic configurations
</testing-strategy>

<project-structure>
### Laravel Project Structure
```
app/
├── Http/
│   └── Controllers/     # Keep thin, delegate to services
├── Livewire/           # Livewire components
├── Models/             # Eloquent models with relationships
├── Services/           # Business logic
├── Filament/           # Admin panel resources
└── Actions/            # Single-purpose action classes

resources/
├── views/
│   ├── components/     # Blade components
│   ├── livewire/      # Livewire views
│   └── layouts/       # Layout templates
└── js/                # Alpine.js and custom JS

database/
├── migrations/         # Database structure
├── seeders/           # Test data
└── factories/         # Model factories
```
</project-structure>
</implementation-standards>

<problem-solving>
## Problem-Solving Together

When you're stuck or confused:
1. **Stop** - Don't spiral into complex solutions
2. **Delegate** - Consider spawning agents for parallel investigation
3. **Ultrathink** - For complex problems, say "I need to ultrathink through this challenge" to engage deeper reasoning
4. **Step back** - Re-read the requirements
5. **Simplify** - The simple solution is usually correct
6. **Ask** - "I see two approaches: [A] vs [B]. Which do you prefer?"

My insights on better approaches are valued - please ask for them!
</problem-solving>

<performance-security>
## Performance & Security

### **Measure First**:
- No premature optimization
- Use Laravel Telescope for debugging
- Profile with Clockwork or Laravel Debugbar
- Monitor N+1 queries with eager loading

### **Security Always**:
- Validate all inputs properly (controller validation or Livewire rules)
- Use Laravel's built-in authentication
- Mass assignment protection on models
- CSRF protection on all forms
- Use Laravel's encryption for sensitive data
- Sanitize user input, especially in Livewire components
</performance-security>

<communication>
## Communication Protocol

### Progress Updates:
```
✓ Implemented user authentication (all Pest tests passing)
✓ Added Filament resource for user management
✗ Found issue with Livewire component state - investigating
```

### Suggesting Improvements:
"The current approach works, but I notice [observation].
Would you like me to [specific improvement]?"
</communication>

<working-together>
## Working Together

- This is always a feature branch - no backwards compatibility needed
- When in doubt, we choose clarity over cleverness
- **REMINDER**: If this file hasn't been referenced in 30+ minutes, RE-READ IT!
- Use Herd for local development - it's fast and handles everything, the app usually runs on https://<folder-name>.test
- Leverage Laravel's conventions - don't fight the framework
</working-together>

<laravel-best-practices>
## Laravel/Livewire/Filament Best Practices

### Livewire Components:
- Keep components focused on single responsibilities
- Use actions for user interactions
- Avoid database queries in render methods
- Use lazy loading for expensive operations
- Implement proper validation rules
- Use Laravel Echo for real-time updates instead of polling
- Listen for broadcast events to update component state

### Filament Resources:
- Follow the standard resource pattern
- Use proper form schemas
- Implement table filters and actions
- Use relationship managers for complex associations
- Customize forms and tables appropriately
- Use Laravel Echo for real-time table updates instead of polling
- Implement broadcast events for admin panel notifications

## Core Laravel Principle

**Follow Laravel conventions first.** If Laravel has a documented way to do something, use it. Only deviate when you have a clear justification.

## PHP Standards

- Follow PSR-1, PSR-2, and PSR-12
- Use camelCase for non-public-facing strings
- Use short nullable notation: `?string` not `string|null`
- Always specify `void` return types when methods return nothing

## Class Structure
- Use typed properties, not docblocks:
- Constructor property promotion when all properties can be promoted:
- One trait per line:

## Type Declarations & Docblocks
- Use typed properties over docblocks
- Specify return types including `void`
- Use short nullable syntax: `?Type` not `Type|null`
- Document iterables with generics:
  ```php
  /** @return Collection<int, User> */
  public function getUsers(): Collection
  ```

### Docblock Rules
- Don't use docblocks for fully type-hinted methods (unless description needed)
- **Always import classnames in docblocks** - never use fully qualified names:
  ```php
  use \Spatie\Url\Url;
  /** @return Url */
  ```
- Use one-line docblocks when possible: `/** @var string */`
- Most common type should be first in multi-type docblocks:
  ```php
  /** @var Collection|SomeWeirdVendor\Collection */
  ```
- If one parameter needs docblock, add docblocks for all parameters
- For iterables, always specify key and value types:
  ```php
  /**
   * @param array<int, MyObject> $myArray
   * @param int $typedArgument
   */
  function someFunction(array $myArray, int $typedArgument) {}
  ```
- Use array shape notation for fixed keys, put each key on it's own line:
  ```php
  /** @return array{
     first: SomeClass,
     second: SomeClass
  } */
  ```

## Control Flow
- **Happy path last**: Handle error conditions first, success case last
- **Avoid else**: Use early returns instead of nested conditions
- **Separate conditions**: Prefer multiple if statements over compound conditions
- **Always use curly brackets** even for single statements
- **Ternary operators**: Each part on own line unless very short

```php
// Happy path last
if (! $user) {
    return null;
}

if (! $user->isActive()) {
    return null;
}

// Process active user...

// Short ternary
$name = $isFoo ? 'foo' : 'bar';

// Multi-line ternary
$result = $object instanceof Model ?
    $object->name :
    'A default value';

// Ternary instead of else
$condition
    ? $this->doSomething()
    : $this->doSomethingElse();
```

## Laravel Conventions

### Routes
- URLs: kebab-case (`/open-source`)
- Route names: camelCase (`->name('openSource')`)
- Parameters: camelCase (`{userId}`)
- Use tuple notation: `[Controller::class, 'method']`

### Controllers
- Plural resource names (`PostsController`)
- Stick to CRUD methods (`index`, `create`, `store`, `show`, `edit`, `update`, `destroy`)
- Extract new controllers for non-CRUD actions

### Configuration
- Files: kebab-case (`pdf-generator.php`)
- Keys: snake_case (`chrome_path`)
- Add service configs to `config/services.php`, don't create new files
- Use `config()` helper, avoid `env()` outside config files

### Artisan Commands
- Names: kebab-case (`delete-old-records`)
- Always provide feedback (`$this->comment('All ok!')`)
- Show progress for loops, summary at end
- Put output BEFORE processing item (easier debugging):
  ```php
  $items->each(function(Item $item) {
      $this->info("Processing item id `{$item->id}`...");
      $this->processItem($item);
  });

  $this->comment("Processed {$items->count()} items.");
  ```

## Strings & Formatting

- **String interpolation** over concatenation:

## Enums

- Use PascalCase for enum values:

## Comments

- **Avoid comments** - write expressive code instead
- When needed, use proper formatting:
  ```php
  // Single line with space after //

  /*
   * Multi-line blocks start with single *
   */
  ```
- Refactor comments into descriptive function names

## Whitespace

- Add blank lines between statements for readability
- Exception: sequences of equivalent single-line operations
- No extra empty lines between `{}` brackets
- Let code "breathe" - avoid cramped formatting

## Validation

- Use array notation for multiple rules (easier for custom rule classes):
  ```php
  public function rules() {
      return [
          'email' => ['required', 'email'],
      ];
  }
  ```
- Custom validation rules use snake_case:
  ```php
  Validator::extend('organisation_type', function ($attribute, $value) {
      return OrganisationType::isValid($value);
  });
  ```

## Blade Templates

- Indent with 4 spaces
- No spaces after control structures:
  ```blade
  @if($condition)
      Something
  @endif
  ```

## Authorization

- Policies use camelCase: `Gate::define('editPost', ...)`
- Use CRUD words, but `view` instead of `show`

## Translations

- Use `__()` function over `@lang`:

## API Routing

- Use plural resource names: `/errors`
- Use kebab-case: `/error-occurrences`
- Limit deep nesting for simplicity:
  ```
  /error-occurrences/1
  /errors/1/occurrences
  ```

## Quick Reference

### Naming Conventions
- **Classes**: PascalCase (`UserController`, `OrderStatus`)
- **Methods/Variables**: camelCase (`getUserName`, `$firstName`)
- **Routes**: kebab-case (`/open-source`, `/user-profile`)
- **Config files**: kebab-case (`pdf-generator.php`)
- **Config keys**: snake_case (`chrome_path`)
- **Artisan commands**: kebab-case (`php artisan delete-old-records`)

### File Structure
- Controllers: plural resource name + `Controller` (`PostsController`)
- Views: camelCase (`openSource.blade.php`)
- Jobs: action-based (`CreateUser`, `SendEmailNotification`)
- Events: tense-based (`UserRegistering`, `UserRegistered`)
- Listeners: action + `Listener` suffix (`SendInvitationMailListener`)
- Commands: action + `Command` suffix (`PublishScheduledPostsCommand`)
- Mailables: purpose + `Mail` suffix (`AccountActivatedMail`)
- Resources/Transformers: plural + `Resource`/`Transformer` (`UsersResource`)
- Enums: descriptive name, no prefix (`OrderStatus`, `BookingType`)

### Migrations
- do not write down methods in migrations, only up methods

### Code Quality Reminders

#### PHP
- Use typed properties over docblocks
- Prefer early returns over nested if/else
- Use constructor property promotion when all properties can be promoted
- Avoid `else` statements when possible
- Use string interpolation over concatenation
- Always use curly braces for control structures

Avoid complex abstractions or "clever" code. The simple, obvious solution is probably better, and my guidance helps you stay focused on what matters.
</laravel-best-practices>